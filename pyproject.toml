[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "penetration-tools"
version = "0.1.0"
description = "A comprehensive penetration testing framework with DevOps integration"
authors = [
    {name = "Security Team", email = "security@company.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Networking :: Monitoring",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "cryptography>=41.0.0",
    
    # Async & Background Tasks
    "celery>=5.3.0",
    "redis>=5.0.0",
    "aiofiles>=23.2.0",
    
    # Network & Security Tools
    "scapy>=2.5.0",
    "nmap-python>=0.7.1",
    "paramiko>=3.4.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "selenium>=4.15.0",
    
    # Web Application Testing
    "sqlmap>=1.7.0",
    "w3af>=2.0.0",
    "zapv2>=0.0.20",
    
    # Database Testing
    "pymongo>=4.6.0",
    "mysql-connector-python>=8.2.0",
    "psycopg2-binary>=2.9.0",
    
    # Monitoring & Logging
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "elasticsearch>=8.11.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    
    # Development Tools
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # CLI
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0.1",
    "xmltodict>=0.13.0",
    "lxml>=4.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.6.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

production = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
]

[project.scripts]
pentest = "penetration_tools.cli:main"
pentest-server = "penetration_tools.server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scapy.*",
    "nmap.*",
    "paramiko.*",
    "selenium.*",
    "sqlmap.*",
    "w3af.*",
    "zapv2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.safety]
output = "json" 